# -*- coding: utf-8 -*-
"""Untitled44.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yy_8hx-902_fIkkSEyfYb5WGqMDAF41U
"""

# Step 1: Load the Iris Dataset
# Using pandas library for data analysis
import pandas as pd

# Load the given Iris dataset from the Iris.csv file
iris_data = pd.read_csv('/Iris.csv')

# Step 2: Split the Data into a Training Set and Test Set
# Importing train_test_split from Scikit-Learn to split data into training and testing sets
from sklearn.model_selection import train_test_split

# X means features (sepal length, sepal width, petal length, and petal width)
X = iris_data.iloc[:, 1:5]
# Y means target variable (class or label)
Y = iris_data['Species']

# As 'test_size=0.2', thus, 20% of the data will be used for testing, and the remaining 80% will be used for training
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=1)

# Step 3: Preprocess the Data (if needed)
# Encoding 'Species' column into numerical values
iris_data = pd.get_dummies(iris_data, columns=['Species'], prefix=['Species'], drop_first=True)

# Importing the StandardScaler from Scikit-Learn to standardize the specific colums of the dataset.
from sklearn.preprocessing import StandardScaler

# Creating a StandardScaler instance
scaler = StandardScaler()

# # Apply the StandardScaler to these selected columns
iris_data[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']] = scaler.fit_transform(iris_data[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']])

# Step 4: Build a Decision Tree Classifier
# Importing the DecisionTreeClassifier from sklearn.tree to build decision tree classifier
from sklearn.tree import DecisionTreeClassifier

# Create a decision tree classifier
decision_tree_classifier = DecisionTreeClassifier()

# Train the model on the training data
decision_tree_classifier.fit(X_train, Y_train)

# Step 5: Train a Random Forest Classifier
# Importing the RandomForestClassifier from sklearn.ensemble to train a random forest classifier
from sklearn.ensemble import RandomForestClassifier

# Create a random forest classifier
random_forest_classifier = RandomForestClassifier(n_estimators=100)

# Train the model on the training data
random_forest_classifier.fit(X_train, Y_train)

# Step 6: Evaluate the Classifiers
# Importing accuracy_score and classification_report from sklearn.metrics to evaluate the accuracy between decision tree and random forest
from sklearn.metrics import accuracy_score, classification_report

# Evaluate the Decision Tree classifier
decision_tree_predictions = decision_tree_classifier.predict(X_test)

# Using accuracy_score to calculate the accuracy of a model's predictions.
decision_tree_accuracy = accuracy_score(Y_test, decision_tree_predictions)
print("Decision Tree Classifier:")
print(f"Accuracy: {decision_tree_accuracy}\n")

# Using classification_report for evaluating the performance of a classification model.
print(classification_report(Y_test, decision_tree_predictions))

# Evaluate the Random Forest classifier
random_forest_predictions = random_forest_classifier.predict(X_test)

# Using accuracy_score to calculate the accuracy of a model's predictions.
random_forest_accuracy = accuracy_score(Y_test, random_forest_predictions)
print("\nRandom Forest Classifier:")
print(f"Accuracy: {random_forest_accuracy}\n")

# Using classification_report for evaluating the performance of a classification model.
print(classification_report(Y_test, random_forest_predictions))