# -*- coding: utf-8 -*-
"""Untitled44.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yy_8hx-902_fIkkSEyfYb5WGqMDAF41U
"""

import pandas as pd
from sklearn import svm
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
from sklearn.impute import SimpleImputer  # Import SimpleImputer

# Load the training and test data from CSV files
train_data = pd.read_csv('mnist_train.csv')
test_data = pd.read_csv('mnist_test.csv')

# Extract labels and features
x_train = train_data.iloc[:, 1:].values
y_train = train_data.iloc[:, 0].values
x_test = test_data.iloc[:, 1:].values
y_test = test_data.iloc[:, 0].values

# Create a simple imputer to replace missing values with the mean of the column
imputer = SimpleImputer(strategy='mean')

# Fit and transform the imputer on x_train
x_train = imputer.fit_transform(x_train)
x_test = imputer.transform(x_test)

# Train a linear SVM classifier
clf_linear = svm.SVC(kernel='linear', decision_function_shape='ovr')
clf_linear.fit(x_train, y_train)

# Report training accuracy
train_accuracy = clf_linear.score(x_train, y_train)
print("Linear SVM Training Accuracy:", train_accuracy)


# Create a standard scaler
scaler = StandardScaler()

# Fit and transform the training data
x_train_scaled = scaler.fit_transform(x_train)

# Retrain the linear SVM classifier on the scaled data
clf_linear_scaled = svm.SVC(kernel='linear', decision_function_shape='ovr')
clf_linear_scaled.fit(x_train_scaled, y_train)

# Report scaled training accuracy
train_accuracy_scaled = clf_linear_scaled.score(x_train_scaled, y_train)
print("Linear SVM (Scaled) Training Accuracy:", train_accuracy_scaled)

# Train a non-linear SVM with the RBF kernel
clf_rbf = svm.SVC(kernel='rbf', decision_function_shape='ovr')
clf_rbf.fit(x_train_scaled, y_train)

# Report RBF SVM training accuracy
train_accuracy_rbf = clf_rbf.score(x_train_scaled, y_train)
print("RBF SVM Training Accuracy:", train_accuracy_rbf)

# Transform the test data using the same scaler
x_test_scaled = scaler.transform(x_test)

# Make predictions using the linear SVM
linear_svm_predictions = clf_linear_scaled.predict(x_test_scaled)

# Make predictions using the RBF SVM
rbf_svm_predictions = clf_rbf.predict(x_test_scaled)

# Report classification results for both models
print("Linear SVM Classification Report:\n", classification_report(y_test, linear_svm_predictions))
print("RBF SVM Classification Report:\n", classification_report(y_test, rbf_svm_predictions))