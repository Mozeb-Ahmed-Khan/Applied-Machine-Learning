# -*- coding: utf-8 -*-
"""Untitled44.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/113GAwF6tC6YkTZ0H-DowJyVZC2sNN2-s
"""

# Activation functions
def ReLU(x):
    return np.maximum(0, x)

def Sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoidDerivative(x):
    return x * (1 - x)

# Training loop
noOfEpochs = 10000
for epoch in range(noOfEpochs):
    # Forward pass
    hiddenInput = np.dot(X, weightsInputHidden) + biasHidden
    hiddenOutput = ReLU(hiddenInput)

    outputInput = np.dot(hiddenOutput, weightsHiddenOutput) + biasOutput
    output = Sigmoid(outputInput)

    # Backpropagation
    outputError = Y - output
    outputDelta = outputError * sigmoidDerivative(output)

    hiddenError = outputDelta.dot(weightsHiddenOutput.T)
    hiddenDelta = hiddenError * (hiddenOutput > 0)

    # Update weights and biases
    weightsHiddenOutput += learningRate * hiddenOutput.T.dot(outputDelta)
    biasOutput += learningRate * np.sum(outputDelta, axis=0, keepdims=True)
    weightsInputHidden += learningRate * X.T.dot(hiddenDelta)
    biasHidden += learningRate * np.sum(hiddenDelta, axis=0, keepdims=True)

# Test the trained model
testData = np.array([
    [1, 0, 0, 1, 0],  # Example test data
    [0, 1, 1, 1, 1]
])

# Forward pass for testing
hiddenInputTest = np.dot(testData, weightsInputHidden) + biasHidden
hiddenOutputTest = ReLU(hiddenInputTest)

outputInputTest = np.dot(hiddenOutputTest, weightsHiddenOutput) + biasOutput
outputTest = Sigmoid(outputInputTest)

# Display the trained model and predictions
print("Trained Model: Artificial Neural Network (Back Propagation)\n")

# Weights (Input to Hidden)
print("Weights: (Input to Hidden)")
for i in range(inputSize):
    for j in range(hiddenSize):
        print(f"W_input_hidden[{i+1},{j+1}] = {weightsInputHidden[i, j]:.4f}")
print()

# Bias (Hidden)
print("Bias: (Hidden)")
for j in range(hiddenSize):
    print(f"Bias_hidden[{j+1}] = {biasHidden[0, j]:.4f}")
print()

# Weights (Hidden to Output)
print("Weights: (Hidden to Output)")
for j in range(hiddenSize):
    print(f"W_hidden_output[{j+1}] = {weightsHiddenOutput[j, 0]:.4f}")
print()

# Bias (Output)
print("Bias: (Output)")
print(f"Bias_output = {biasOutput[0, 0]:.4f}")
print()

# Test Data Predictions
print("\nTest Data Predictions:")
for i in range(len(testData)):
    print(f"Input: {testData[i, :inputSize]} \n Prediction: {outputTest[i, 0]:.4f}")